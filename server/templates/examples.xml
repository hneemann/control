<?xml version="1.0" encoding="UTF-8"?>
<Examples>
    <example name="Daten-Plot"
             name-en="Data-Plot">let data = [
  [0, 0],
  [1, 1],
  [2, 4],
  [3, 9],
  [4,16],
];

plot(
 data.graph()
)</example>
    <example name="Daten-Plot 2"
             name-en="Data-Plot 2">let data = [
  { x:0, a: 0, b:4 },
  { x:1, a: 1, b:5 },
  { x:2, a: 4, b:6 },
  { x:3, a: 9, b:7 },
  { x:4, a:16, b:8 },
];

plot(
  data.graph(p->p.x, p->p.a).mark(1,blue) .line(blue.dash(7,7),"a"),
  data.graph(p->p.x, p->p.b).mark(2,green).line(green.dash(7,7),"b"),
).legendPos(0.2,15)</example>
    <example name="Graph" desc="Funktionsplot"
             name-en="Graph" desc-en="Function plot">plot(
 graph( x->sin(pi*x) )
).cross()</example>
    <example name="Graph 2" desc="Funktionsplotter"
             name-en="Graph 2" desc-en="Function plot">plot(
 graph( x->sin(x) ).line(black, "sin(x)"),
 graph( x->cos(x) ).line(blue, "cos(x)"),
 graph( x->tan(x) ).line(red, "tan(x)")
).cross()
 .xBounds(-pi,pi)
 .yBounds(-2,2)</example>
    <example name="Ortskurve" desc="Darstellung der Ortskurve"
             name-en="Nyquist plot" desc-en="Nyquist plot">let g = 3/((s+1)*(s+2));

plot(
  g.nyquist()
)</example>
    <example name="Ortskurve 2" desc="Darstellung der Ortskurve"
             name-en="Nyquist plot 2" desc-en="Nyquist plot">let g = 3/((s+1)*(s+1.5)*(s+2));

func h(w)
  let c1 = g( _i*w );
  let c2 = g( _i*w*0.99 );
  hintDir(c1.real(),c1.imag(),c2.real(),c2.imag(),"#omega="+w);

plot(
  g.nyquist(),
  [0.1, 0.25, 0.5, 1, 2, 5].map(h)
)</example>
    <example name="Nyquist-Kriterium" desc="Anwendung des Nyquist-Kriteriums"
             name-en="Nyquist stability criterion">let g = 6*(s+1)/((s-1)*(s-3));

plot(
  g.nyquist(true)
)</example>
    <example name="Bode" desc="Darstellung eines Bode-Diagramms"
             name-en="Bode plot" desc-en="Bode plot">let g = 3/((s+1)*(s+2));

plot(
  g.bode()
)</example>
    <example name="Bode 2" desc="Darstellung mehrerer Kurven in einem Bode-Diagramm"
             name-en="Bode plot 2" desc-en="Multiple systems">let g  = 3/((s+1)*(s+2));
let k  = 1.6*(1+1/(1.7*s));
let g0 = k*g;

plot(
  g.bode(green, "G"),
  k.bode(blue,  "K"),
  g0.bode(black, "G#0")
)</example>
    <!--example name="PID" desc="Die pid-Funktion"
             name-en="PID" desc-en="The pid function">[
 ["pid(2,2)",        "=", pid(2,2)  ],
 ["pid(2,3,1)",      "=", pid(2,3,1)],
 ["pid(2,3,1,0.01)", "=", pid(2,3,1,0.01)]
]</example-->
    <example name="WOK" desc="Darstellung einer Wurzelortskurve"
             name-en="Root locus analysis" desc-en="Root locus analysis">let g = 3/((s+1)*(s+2));
let k = 1+1/(0.9*s);

plot(
  (k*g).evans(1)
)</example>

    <example name="WOK 2" desc="Darstellung einer Wurzelortskurve"
             name-en="Root locus analysis 2" desc-en="Root locus analysis">let l = 352*poly(5,1)/poly(0,0,2000,200,25,1);

plot(
  l.evans(100)
)</example>

    <example name="Simulation" desc="Simulation des Systems"
             name-en="Simulation" desc-en="Simulation of a linear system">let g = 70/((s+1)*(s+2)*(s+2.5));
let k1 = 0.2*(0.6*s+1)/(0.002*s+1);
let k2 = pid(0.1,2);
let k3 = pid(0.3,2,0.5);

plot(
  yConst(1),
  (k1*g).loop().simStep(10).graph().line(blue,  "phasenanhebendes Korrekturglied"),
  (k2*g).loop().simStep(10).graph().line(black, "PI"),
  (k3*g).loop().simStep(10).graph().line(green, "PID")
).labels("t [s]","h(t)").legendPos(5,0.87)</example>

<example name="Simulation nicht linear" desc="Simulation eines nicht linearen Systems"
         name-en="Simulation non linear" desc-en="Simulation of a non linear system">let G = 70/((s+1)*(s+2)*(s+2.5));

let kp = 0.24;
let Ti = 1.05;
let Td = 0.82;
let Tp = 0.05;

let K = pid(kp,Ti,Td,Tp);

// Simulation of a Simulink-like model in the form of a netlist.
// The blocks are connected by the names of inputs
// and outputs. The order of the blocks does not matter.
// A block can be a constant, a transfer function, an operation
// like "+", "-", "*", "dif" or "int" or a custom function.
// If a function is used, and there is no 'in' field given, the
// function has to have exactly one argument, which is the time.
// If the function has an in-field, it has to have exactly as
// many arguments as there are inputs and the output is the
// function result.
// There are also some functions, which create special blocks
// like 'blockDelay', 'blockLimiter', 'blockGain' and 'blockPid'.
let systemDescription = [
 {              block: 1,                 out:"w"    },
 {in:["w","y"], block: "-",               out:"e"    },
 {in:"e",       block: K,                 out:"u"    },
 {in:"u",       block: blockLimiter(0,1), out:"uLim" },
 {in:"uLim",    block: G,                 out:"y"    }
];

let simLimited = simulateBlocks(systemDescription,6);
let simNormal  = (K*G).loop().simStep(6);

plot(
  yConst(1),
  simNormal.graph().      line(green, "y (u unlimited)"),
  simLimited.uLim.graph().line(blue,  "u limited"),
  simLimited.y.graph().   line(black, "y (u limited)")
).legendPos(2,0.7)
 .labels("t [s]", "h(t)")
 .title("Effect of a Limiter")</example>
    <example name="Zweitor Travo" desc="Berechnung realer Travo"
             name-en="Two-Port Transformer" desc-en="Two-Port real transformer">let Rin   = 2000;
let Lh    =   10;
let ueber =   10;
let Rout  =    5;
let Rload =  100;
let omega = 2*pi*50;

let transformer =
  tpCascade (
    tpSeries(Rin),
    tpShunt(_i*omega*Lh),
    tpH(   0  , ueber,
        -ueber,   0  ),
    tpSeries(Rout),
  );

let gain=transformer.voltageGain(Rload).abs();

[
 ["Transformer:",transformer],
 ["Voltage Gain:",gain],
 ["Uout:",gain*240]
]</example>
    <example name="Zweitor Transistor" desc="Berechnung Transistorschaltung"
             name-en="Two-Port Transistor" desc-en="Two-Port Transistor">let tr=tpH(2700, 1.5e-4,
            220,  18e-6);

let t2=tr.series(tpShunt(3300));

let ges=tpCascade(
  tr,
  tpShunt(15000),
  tpShunt(82000),
  tpShunt(820000),
  t2
);

[
 ["Trans:", tr],
 ["Ges:",   ges],
 ["Vuf:",   ges.voltageGain(15000)],
 ["Rin:",   ges.inputImp(15000)],
]</example>
    <example name="Rotationskörper" desc="Interaktiver Rotationskörper"
             name-en="Solid of Revolution" desc-en="interactive Solid of revolution">
func sor(u,v)
  vec(u*sin(v),u*cos(v),u^2);

plot(
  sor.solid3d()
     .uBounds(0,2)
     .vBounds(0,2*pi)
     .color(black.fill(red.darker(50)),red)
).xBounds(-3,3)
 .yBounds(-3,3)
 .zBounds(0,4)
 .addSliderTo(gui)
</example>

</Examples>