<?xml version="1.0" encoding="UTF-8"?>
<Examples>
    <example name="Daten-Plot"
             name-en="Data-Plot" >let data = [
  [0, 0],
  [1, 1],
  [2, 4],
  [3, 9],
  [4,16]
];

plot(
 scatter( data )
)</example>
    <example name="Graph" desc="Funktionsplot"
             name-en="Graph" desc-en="Function plot">plot(
 function( x->sin(pi*x) )
)</example>
    <example name="Graph 2" desc="Funktionsplotter"
             name-en="Graph 2" desc-en="Function plot">plot(
 function( x->sin(x), black, "sin(x)"),
 function( x->cos(x), blue,  "cos(x)"),
 function( x->tan(x), red,   "tan(x)")
).xBounds(0,2*pi).yBounds(-2,2)</example>
    <example name="Ortskurve" desc="Darstellung der Ortskurve"
             name-en="Nyquist plot" desc-en="Nyquist plot">let g = 3/((s+1)*(s+2));

g.nyquist()</example>
    <example name="Ortskurve 2" desc="Darstellung der Ortskurve"
             name-en="Nyquist plot 2" desc-en="Nyquist plot" >let g = 3/((s+1)*(s+1.5)*(s+2));

func h(w)
  let c1 = g( _i*w );
  let c2 = g( _i*w*0.99 );
  hintDir(c1.real(),c1.imag(),c2.real(),c2.imag(),"ω="+w);

g.nyquist()
  .add( h(0.1)  )
  .add( h(0.25) )
  .add( h(0.5)  )
  .add( h(1)    )
  .add( h(2)    )
  .add( h(5)    )</example>
    <example name="Nyquist" desc="Anwendung des Nyquistkriteriums"
             name-en="Nyquist stability criterion">let g = 6*(s+1)/((s-1)*(s-3));

g.nyquist(true)</example>
    <example name="Bode" desc="Darstellung eines Bode-Diagramms"
             name-en="Bode plot" desc-en="Bode plot">let g = 3/((s+1)*(s+2));

bode(0.01,100)
  .add(g)</example>
    <example name="Bode 2" desc="Darstellung mehrerer Kurven in einem Bode-Diagramm"
             name-en="Bode plot 2" desc-en="Multiple systems">let g = 3/((s+1)*(s+2));
let k = 1.6*(1+1/(1.7*s));

let g0=k*g;
let pm=g0.pMargin();

let g0Leg = sprintf(toUnicode("G#0, #Phi#r=%.1f°, #omega#s=%.2f rad/s"),
                    pm.pMargin, pm.w0);

bode(0.01,100)
  .add(g,  green, "G")
  .add(k,  blue,  "K")
  .add(g0, black, g0Leg)
  .phaseModify( p->p.add(yConst(-180+70,red.dash(7,7)))
                    .add(yConst(-180+50,red.dash(7,7)))
                    .add(xConst(pm.w0,  red.dash(7,7))) )
  .ampModify( a->a.add(xConst(pm.w0,red.dash(7,7))) )</example>
    <example name="PID" desc="Die pid-Funktion"
             name-en="PID" desc-en="The pid function">[
 ["pid(2,2)",        "=", pid(2,2)  ],
 ["pid(2,3,1)",      "=", pid(2,3,1)],
 ["pid(2,3,1,0.01)", "=", pid(2,3,1,0.01)]
]</example>
    <example name="WOK" desc="Darstellung einer Wurzelortskurve"
             name-en="Root locus analysis" desc-en="Root locus analysis">let g = 3/((s+1)*(s+2));
let k = 1+1/(0.9*s);

(k*g).evans(2)</example>

    <example name="WOK 2" desc="Darstellung einer Wurzelortskurve"
             name-en="Root locus analysis 2" desc-en="Root locus analysis">let l = 352*poly(5,1)/poly(0,0,2000,200,25,1);
l.evans(100)</example>

    <example name="Simulation" desc="Simulation des Systems"
             name-en="Simulation" desc-en="Simulation of a linear system">let g = 70/((s+1)*(s+2)*(s+2.5));
let k1 = 0.2*(0.6*s+1)/(0.002*s+1);
let k2 = pid(0.1,2);
let k3 = pid(0.3,2,0.5);

plot(
  yConst(1),
  curve((k1*g).loop().simStep(10),blue,"phasenanhebendes Korrekturglied"),
  curve((k2*g).loop().simStep(10),black,"PI"),
  curve((k3*g).loop().simStep(10),green,"PID")
).labels("t [s]","h(t)").legendPos(5,0.87)</example>

<example name="Simulation nicht linear" desc="Simulation eines nicht linearen Systems"
         name-en="Simulation non linear" desc-en="Simulation of a non linear system">let G = 70/((s+1)*(s+2)*(s+2.5));

let kp = 0.24;
let Ti = 1.05;
let Td = 0.82;
let Tp = 0.05;

let K = pid(kp,Ti,Td,Tp);

// A Simulink-like model in the form of a netlist.
// The blocks are connected by the names of inputs
// and outputs. The order of the blocks does not matter.
let systemDescription = [
 {              block: 1,                 out:"w"    },
 {in:["w","y"], block: "-",               out:"e"    },
 {in:"e",       block: K,                 out:"u"    },
 {in:"u",       block: blockLimiter(0,1), out:"uLim" },
 {in:"uLim",    block: G,                 out:"y"    }
];

let simLimited = simulateBlocks(systemDescription,6);
let simNormal  = (K*G).loop().simStep(6);

plot(
  yConst(1),
  curve(simNormal,       green, "y (u unlimited)" ),
  curve(simLimited.uLim, blue,  "u limited"       ),
  curve(simLimited.y,    black, "y (u limited)"   )
).legendPos(2,0.7)
 .labels("t [s]", "h(t)")
 .title("Effect of a Limiter")</example>
    <example name="Zweitor Travo" desc="Berechnung realer Travo"
             name-en="Two-Port Transformer" desc-en="Two-Port real transformer">let Rin   = 2000;
let Lh    = 10;
let ueber = 10;
let Rout  = 5;
let Cout  = 400e-6;
let Rload = 500;
let omega = 2*pi*50;

let transformer =
  tpCascade (
    tpSeries(Rin),
    tpShunt(_i*omega*Lh),
    tpH(0,ueber,-ueber,0),
    tpSeries(Rout),
    tpShunt(1/(_i*omega*Cout))
  );

let gain=transformer.voltageGain(Rload).abs();

[
 ["Transformer:",transformer],
 ["Voltage Gain:",gain],
 ["Uout:",gain*240]
]</example>
    <example name="Zweitor Transistor" desc="Berechnung Transistorschaltung"
             name-en="Two-Port Transistor" desc-en="Two-Port Transistor">let tr=tpH(2700, 1.5e-4,
            220,  18e-6);

let t2=tr.series(tpShunt(3300));

let ges=tpCascade(
  tr,
  tpShunt(15000),
  tpShunt(82000),
  tpShunt(820000),
  t2
);

[
 ["Trans:", tr],
 ["Ges:",   ges],
 ["Vuf:",   ges.voltageGain(15000)],
 ["Rin:",   ges.inputImp(15000)],
]</example>

</Examples>